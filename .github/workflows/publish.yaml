# https://github.com/home-assistant/addons-example/blob/main/.github/workflows/builder.yaml
name: Publish containers

on:
  push:
    branches:
      - main

env:
  BUILD_ARGS: ""
  MONITORED_FILES: "config.yaml Dockerfile"

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    if: ${{ contains(github.event.head_commit.message, 'dorelease') }}
    outputs:
      changed_containers: ${{ steps.changed_containers.outputs.containers }}
      changed: ${{ steps.changed_containers.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: Ana06/get-changed-files@v2.3.0

      - name: Find container directories
        id: containers
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed containers
        id: changed_containers
        run: |
          declare -a changed_containers
          for container in ${{ steps.containers.outputs.addons }}; do
            if [[ "$BUILD_ARGS" =~ "--force" ]]; then
              echo "Force build for $container";
              changed_containers+=("\"${container}\",");
            elif [[ "${{ steps.changed_files.outputs.all }}" =~ $container ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $container/$file ]]; then
                    if [[ ! "${changed_containers[@]}" =~ $container ]]; then
                      changed_containers+=("\"${container}\",");
                    fi
                  fi
              done
            fi
          done

          changed=$(echo ${changed_containers[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed containers: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "containers=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No container had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi

  build:
    needs: init
    runs-on: ubuntu-latest
    if: needs.init.outputs.changed == 'true'
    name: Build ${{ matrix.container }} container
    strategy:
      matrix:
        container: ${{ fromJson(needs.init.outputs.changed_containers) }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install yq
        run: sudo apt-get install -y yq

      - name: Get image info
        id: info
        run: |
          echo "image=$(yq -r ".image" ${{ matrix.container }}/config.yaml)" >> $GITHUB_OUTPUT
          echo "platforms=$(yq -r ".platforms | join(\",\")" ${{ matrix.container }}/config.yaml)" >> $GITHUB_OUTPUT
          echo "version=$(yq -r ".version" ${{ matrix.container }}/config.yaml)" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        if: ${{ !contains(env.BUILD_ARGS, '--test') }}
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.info.outputs.image }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.info.outputs.version }}

      # Multi-arch build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Publish images
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.container }}
          file: ./${{ matrix.container }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ steps.info.outputs.platforms }}
